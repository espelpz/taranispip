/*
 * -------------------------------------------------
 *  nf-core/taranispip Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

// Global default params, used in configs


// !!!!!!!!!!!!!!!!!!!!! AQUÍ TENGO QUE PONER TODOS LOS PARÁMETROS DE TODOS LOS PROGRAMAS? O SOLO LOS PARÁMETROS DE LOS PROGRAMAS QUE QUIERA CAMBIAR SU DEFAULT PARA EL PIPELINE? (POR EJEMPLO, CAMBIAR EN EL TRIMMING ALGÚN PARÁMETRO QUE EN FASTP POR DEFECTO ES X VALOR Y YO QUIERO QUE EN EL PIPELINE SEA Y), ADEMÁS DE LOS VALORES POR DEFECTO DE LOS PARÁMETROS PROPIOS DEL PIPELINE (SKIP_X_PROGRAMA, INPUT, OUTPUT, ETC)
// los params por defecto de Taranis, por ejemplo, están indicados en taranis pero si no se indican aquí cómo se le meten los parámetros al pipeline para cambiarlos y no usar los por defecto? 

// Otra duda es: En caso de que aquí se indiquen todos los params que se quieren establecer por defecto para cada programa, como por ejemplo en FASTP, si se quieren utilizar por defecto en este pipeline los por defecto en el propio programa, como por ejemplo el perc_ident_loc de Taranis, que es 90, hay que indicar aquí también el valor por defecto? Porque por sentido común no sería necesario indicarlo ya que en Taranis ya está indicado, sin embargo, si no se añade ese param aquí entonces el usuario en caso de que no quiera utilizar el valor predeterminado no lo podría cambiar, no? Así que en ese caso aunque se quiera utilizar como valor predetermiando del pipeline el valor predeterminado del programa en sí, habría que añadir el parámetro aquí para que así el usuario en caso de querer cambiarlo lo puedises cambiar... o eso creo, no estoy segura...

//* UNA ACLARACIÓN: He visto, por ejemplo, en el caso de trimmomatic en bacterial assembly nf, que el nombre del parámetro declarado en el pipeline no tiene por qué coincidir con el el nombre del parámetro en el propio programa, por ejemplo, en bacterial assembly nf se le da como nombre al parámetro SLIDINGWINDOW ---> ${params.trimmomatic_window_length}:${params.trimmomatic_window_value} (aunque es un poco raro porque en elc aso de bacterial assembly no indica estos parámetros en el config :/)
// lo mismo ocurre en el caso de viralrecon, donde en el propio pipeline llama al parámetro --length_required de fastp ---> $params.min_trim_length (en este caso sí que declara los params en el archivo de config)

params {

  // Workflow flags
  // TODO nf-core: Specify your pipeline's command line flags

  
   
  // Options: Generic
  input = './samplesheet.csv'
  fasta_samples_format = false // incluido para intentar solucionar la parte de fastq y fasta
  fastq_samples_format = true // incluido para intentar solucionar la parte de fastq y fasta


  schema = ''
  reference_alleles = ''
  st_profile = ''


  // Options: SRA download
  save_sra_fastq = false    
  skip_sra_download = false
  
  
  // Options: Schema download
  //skip_schema_download = true // poner esto o no poner nada?
  get_from_rest_api_mode = '' //?????? ESTE PARAM POR DEFECTO NO TIENE NADA, LO TENDRÍA QUE INDICAR EN EL ARCHIVO DE CONFIG? SÍ, NO? PERO A QUÉ PONGO QUE ES IGUAL? EN VIRALRECON CREO QUE HABÍA UN CASO EN EL QUE PONÍA EN EL HELP QUE POR DEFECTO ERA '', MIRAR SI LO METE EN EL ARCHIVO DE CONFIG (OPCIONES: interactive y no_interactive)
  api = '' //?????? ESTE PARAM POR DEFECTO NO TIENE NADA, LO TENDRÍA QUE INDICAR EN EL ARCHIVO DE CONFIG? SÍ, NO? PERO A QUÉ PONGO QUE ES IGUAL? EN VIRALRECON CREO QUE HABÍA UN CASO EN EL QUE PONÍA EN EL HELP QUE POR DEFECTO ERA '', MIRAR SI LO METE EN EL ARCHIVO DE CONFIG (OPCIONES: 'bigsdb' y 'pubMLST')
  organism_id = ''
  schema_database = ''
  schema_type = ''
  skip_get_schema = true                
  skip_get_profile = true 


  // Options: Reference genomes
  genome = false                         // este es el -genome de igenomes o del archivo de genomas que se establezca. En el caso de viralrecon no utiliza igenomes y lo que utiliza es otro archivo generado donde se asocia un ID con un genoma de referencia (fasta) y un gff (enlace a ese doc en Telegram, porque no está entre los archivos de Viralrecon que me descargué) 
  fasta = ''
  gff = ''
  save_reference = false    // SE USA EN EL UNZIP DEL GENOMA DE REFERENCIA y del gff, SUPONGO QUE PARA GUARDAR EL FASTA DESCOMPRIMIDO
  
  
  // Options: Quality Control
  skip_fastqc = false
  skip_multiqc = false
  

  // Options: Read Trimming
  // COMPROBAR CUÁLES SON LOS PARAMS POR DEFECTO EN FASTP O MIRAR QUÉ OTROS PARAMS PUEDO INDICAR
  cut_mean_quality = 30
  qualified_quality_phred = 30
  unqualified_percent_limit = 10
  min_trimming_length = 50
  skip_fastp_trimming = false
  save_trimmed = false 
  
  
  // Options: De novo assembly     
  skip_unicycler_assembly = false
  skip_quast = false
  

  // Options: Analyze Schema
  
  //* inputdir, outputdir y cpus no hace falta indicarlos aquí, se indican/obtienen a lo largo del pipeline
  
  //*outputdir 
  //*cpus = 1 
  remove_subsets = 'False'
  remove_duplicates = 'False'
  remove_nocds = 'False'
  new_schema = 'False'    
  skip_taranis_analyze_schema = true
  
  
  // Options: Reference Allele(s)
  
  //* coregene // esto no lo indico aquí porque le llega por un canal
  //* outputdir // esto no lo indico aquí
  evalue_ref = 0.001 
  perc_identity_ref = 90
  // INDICAR DE ALGUNA FORMA LSO PARÁMETROS DE REWARD, PENALTY, GAPOPEN Y GAPEXTEND PERMITIDOS POR BLAST? ESTÁN EN LA PÁGINA QUE USÉ DE BLASTN
  reward_ref = 1      
  penalty_ref = -2  
  gap_open_ref = 1  
  gap_extend_ref = 1 
  num_threads_ref = 1
  //* cpus = 1 // Esto no se indica aquí
  skip_taranis_reference_alleles = false
   
  // Options: Allele Calling
   
  //coregene // Se indica aquí si no tiene ningún valor por defecto???
  //refalleles // Se indica aquí si no tiene ningún valor por defecto???
  //refgenome // Se indica aquí si no tiene ningún valor por defecto??? 
  // *outputdir // Esto no se indica aquí
  // *cpus = 1 // Esto no se indica aquí
  percentlength = 'SD' 
  coverage = 50 
  evalue_call = 0.001 
  perc_identity_ref_call = 90 
  perc_identity_loc_call = 90 
  reward_call = 1   
  penalty_call = -2
  gapopen_call = 1
  gapextend_call = 1
  max_target_seqs_call = 10
  max_hsps_call = 10
  num_threads_call = 1   
  flanking_nts = 100
  update_schema = 'True'
  st_profile = '' //??????????????? LO CAMBIO POR FALSE EN TARANIS.PY? (Y EN ALLELE CALLING ENTONCES))
  skip_taranis_allele_calling = false


  // Boilerplate options
  outdir = './results'
  publish_dir_mode = 'copy'
  name = false
  multiqc_config = false
  email = false
  email_on_fail = false
  max_multiqc_email_size = 25.MB
  plaintext_email = false
  monochrome_logs = false
  help = false
  ////igenomes_base = 's3://ngi-igenomes/igenomes/'  ////// comentado en vr, lo debería dejar?
  tracedir = "${params.outdir}/pipeline_info"
  igenomes_ignore = false
  custom_config_version = 'master'
  custom_config_base = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
  hostnames = false
  config_profile_description = false
  config_profile_contact = false
  config_profile_url = false



  // Defaults only, expecting to be overwritten
  max_memory = 128.GB
  max_cpus = 16
  max_time = 240.h

}



/////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////

// Container slug. Stable releases should specify release tag!
// Developmental code should specify :dev
process.container = 'nfcore/taranispip:dev'                              /////// #VERSIÓN

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load nf-core custom profiles from different Institutions
try {
  includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
  System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}



/////// #AÑADIR TARANISPIP CUSTOM CONFIG COMO VIRALRECON?
/////////////////////////////////////////////////////////////////////////////////////////////
// Load nf-core/viralrecon custom config
//try {
  //includeConfig "${params.custom_config_base}/pipeline/viralrecon.config"
//} catch (Exception e) {
  //System.err.println("WARNING: Could not load nf-core/config/viralrecon profiles: ${params.custom_config_base}/pipeline/viralrecon.config")
//}
/////////////////////////////////////////////////////////////////////////////////////////////



profiles {
  conda { process.conda = "$projectDir/environment.yml" }
  debug { process.beforeScript = 'echo $HOSTNAME' }
  docker {
    docker.enabled = true
    // Avoid this error:
    //   WARNING: Your kernel does not support swap limit capabilities or the cgroup is not mounted. Memory limited without swap.
    // Testing this in nf-core after discussion here https://github.com/nf-core/tools/pull/351
    // once this is established and works well, nextflow might implement this behavior as new default.
    docker.runOptions = '-u \$(id -u):\$(id -g)'
  }
  singularity {
    singularity.enabled = true
    singularity.autoMounts = true
  }
  
  /////////// NO APARECE EN CONFIG VIRALRECON
 // podman {
 //   podman.enabled = true
 // }
  
  ////////// INCLUIR TESTS
  test { includeConfig 'conf/test.config' }
  test_full { includeConfig 'conf/test_full.config' }
}

// Load igenomes.config if required
//if (!params.igenomes_ignore) {             /////// NO INCLUIDO EN VIRALRECON, SUPONGO QUE 							PORQUE NO HAN MANTENIDO EL ARCHIVO DE 							igenomes.config, LO DEBERÍA DEJAR? Si 							-genome solo se usa para igenomes, y en 								viralrecon se ha eleiminado el archivo de 								igenomes.config (por lo que supongo que no 								utilizan igenomes), por qué se usa en 							viralrecon --genome?
  //includeConfig 'conf/igenomes.config'
//}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
env {
  PYTHONNOUSERSITE = 1
  R_PROFILE_USER = "/.Rprofile"
  R_ENVIRON_USER = "/.Renviron"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_dag.svg"
}

manifest {
  name = 'nf-core/taranispip'
  author = 'Esperanza López López'
  homePage = 'https://github.com/nf-core/taranispip'
  description = 'Gene-by-gene outbreaks analysis pipeline using cgMLST schemas'
  mainScript = 'main.nf'
  nextflowVersion = '>=20.04.0'
  version = '1.0dev'                       ///////////////// AÑADIR VERSIÓN
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
