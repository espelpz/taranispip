/*
 * -------------------------------------------------
 *  nf-core/taranispip Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

// Global default params, used in configs

params {

  // Workflow flags
  // TODO nf-core: Specify your pipeline's command line flags

   
  // Options: Generic
  input = './samplesheet.csv'
  fasta_samples_format = false
  fastq_samples_format = true


  schema = ''
  reference_alleles = ''
  st_profile = ''


  // Options: SRA download
  save_sra_fastq = false    
  skip_sra_download = false
  
  
  // Options: Schema download
  api = ''
  organism_id = ''
  schema_database = ''
  schema_type = ''
  skip_get_schema = true                
  skip_get_profile = true 


  // Options: Reference genomes
  genome = false  
  fasta = ''
  gff = ''
  save_reference = false
  
  
  // Options: Quality Control
  skip_fastqc = false
  skip_multiqc = false
  

  // Options: Read Trimming
  cut_mean_quality = 30
  qualified_quality_phred = 30
  unqualified_percent_limit = 10
  min_trimming_length = 50
  skip_fastp_trimming = false
  save_trimmed = false 
  
  // Options: De novo assembly     
  skip_unicycler_assembly = false
  skip_quast = false
  

  // Options: Analyze Schema
  
  remove_subsets = 'False'
  remove_duplicates = 'False'
  remove_nocds = 'False'
  new_schema = 'False'    
  skip_taranis_analyze_schema = true
  
  
  // Options: Reference Allele(s)
  
  evalue_ref = 0.001 
  perc_identity_ref = 90
  reward_ref = 1      
  penalty_ref = -2  
  gap_open_ref = 1  
  gap_extend_ref = 1 
  num_threads_ref = 1
  skip_taranis_reference_alleles = false
   
   
  // Options: Allele Calling
   
  percentlength = 'SD' 
  coverage = 50 
  evalue_call = 0.001 
  perc_identity_ref_call = 90 
  perc_identity_loc_call = 90 
  reward_call = 1   
  penalty_call = -2
  gapopen_call = 1
  gapextend_call = 1
  max_target_seqs_call = 10
  max_hsps_call = 10
  num_threads_call = 1   
  flanking_nts = 100
  update_schema = 'True'
  st_profile = ''
  skip_taranis_allele_calling = false


  // Boilerplate options
  outdir = './results'
  publish_dir_mode = 'copy'
  name = false
  multiqc_config = false
  email = false
  email_on_fail = false
  max_multiqc_email_size = 25.MB
  plaintext_email = false
  monochrome_logs = false
  help = false
  ////igenomes_base = 's3://ngi-igenomes/igenomes/' 
  tracedir = "${params.outdir}/pipeline_info"
  igenomes_ignore = false
  custom_config_version = 'master'
  custom_config_base = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
  hostnames = false
  config_profile_description = false
  config_profile_contact = false
  config_profile_url = false


  // Defaults only, expecting to be overwritten
  max_memory = 128.GB
  max_cpus = 16
  max_time = 240.h

}



// Container slug. Stable releases should specify release tag!
// Developmental code should specify :dev
process.container = 'nfcore/taranispip:dev'                              /////// #VERSIÓN

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load nf-core custom profiles from different Institutions
try {
  includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
  System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}


profiles {
  conda { process.conda = "$projectDir/environment.yml" }
  debug { process.beforeScript = 'echo $HOSTNAME' }
  docker {
    docker.enabled = true
    // Avoid this error:
    //   WARNING: Your kernel does not support swap limit capabilities or the cgroup is not mounted. Memory limited without swap.
    // Testing this in nf-core after discussion here https://github.com/nf-core/tools/pull/351
    // once this is established and works well, nextflow might implement this behavior as new default.
    docker.runOptions = '-u \$(id -u):\$(id -g)'
  }
  singularity {
    singularity.enabled = true
    singularity.autoMounts = true
  }


 // podman {
 //   podman.enabled = true
 // }
  
  ////////// INCLUIR TESTS
  test { includeConfig 'conf/test.config' }
  test_full { includeConfig 'conf/test_full.config' }
}

// Load igenomes.config if required
//if (!params.igenomes_ignore) {
  //includeConfig 'conf/igenomes.config'
//}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
env {
  PYTHONNOUSERSITE = 1
  R_PROFILE_USER = "/.Rprofile"
  R_ENVIRON_USER = "/.Renviron"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_dag.svg"
}

manifest {
  name = 'nf-core/taranispip'
  author = 'Esperanza López López'
  homePage = 'https://github.com/nf-core/taranispip'
  description = 'Gene-by-gene outbreaks analysis pipeline using cgMLST schemas'
  mainScript = 'main.nf'
  nextflowVersion = '>=20.04.0'
  version = '1.0dev'                       ///////////////// AÑADIR VERSIÓN
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
